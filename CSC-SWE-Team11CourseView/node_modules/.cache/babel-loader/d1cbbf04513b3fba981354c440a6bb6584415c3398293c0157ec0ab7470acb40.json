{"ast":null,"code":"import Cookies from 'js-cookie';\n// import { JWE, JWK } from 'jose'; //error libarary\n\n{/*\n Mission encrypted/decrypted data\n Package Struct:\n req_encrypted.body = {\n    key: partOfKey,\n    data: encryptedData ={\n        userID: userID,\n        action: action,\n        entry: data\n    },\n    image: image\n }\n Behavior:\n use tokenS key\n */}\nexport default class MySecurity {\n  static getUserToken() {\n    {/* connect the databse at server, client use cookie or location storage*/}\n    const accessToken = Cookies.get('access_token');\n    if (accessToken === null) return \"createNewAccount\";\n    return accessToken ? \"\" : accessToken;\n  }\n  static encryptedData(jsonData) {\n    /*        \n    // Tempary disable security\n    let secretKey = this.getUserToken();\n    // Create a JSON Web Key (JWK) from the secret key\n    const jwk = JWK.asKey({ k: secretKey, alg: 'dir' });\n     // Encrypt the JSON data using JWE\n    JWE.createEncrypt({ format: 'compact', contentAlg: 'A256GCM' }, jwk)\n        .update(JSON.stringify(jsonData), 'utf8')\n        .final()\n        .then((result) => {\n            return result;\n        })\n        .catch((error) => console.error('Encryption Error:', error));\n    return null;\n    */\n    return jsonData;\n  }\n  static encryptedPackage(action, data, selectedImage) {\n    /* \n    // temporary disable security\n    let partOfKey = \"createNewAccount\"\n    let secretKey = this.getUserToken();\n    //console.log(secretKey);\n    \n    if (secretKey !== null && secretKey !== \"createNewAccount\") {\n        partOfKey = secretKey.substring(0, Math.floor(Math.random() * (20 - 10 + 1) + 10));\n    }\n    \n    let jsonData = {\n        userID: Cookies.get(\"userID\"),\n        action: action,\n        entry: data\n    };\n    const encrytedD = this.encryptedData(jsonData);\n            let formData = new FormData();\n    if (selectedImage) {\n        formData.append('image', selectedImage);\n    }\n    formData.append('key', partOfKey);\n    formData.append('data', encrytedD);      \n    */\n\n    let jsondata = {\n      userID: Cookies.get(\"userID\"),\n      action: action,\n      entry: data\n    };\n    let formData = new FormData();\n    formData.append('key', \"\");\n    formData.append('data', JSON.stringify(jsondata));\n    if (selectedImage !== null && selectedImage !== undefined) {\n      formData.append('picture', selectedImage);\n    }\n    return formData;\n  }\n  static decryptedData(jsonData) {\n    /*\n    // Tempary disable security\n    let secretKey = this.getUserToken();  \n    // try Decrypt the encrypted data using JWE\n    const jwk = JWK.asKey({ k: secretKey, alg: 'dir' });\n    JWE.createDecrypt(jwk)\n        .decrypt(jsonData, 'utf8')\n        .then((result) => {\n            const decryptedData = JSON.parse(result.payload.toString('utf8'));             \n            return decryptedData;\n        })\n        .catch((error) => console.error('Decryption Error:', error));\n    return null;\n    */\n    return jsonData;\n  }\n}","map":{"version":3,"names":["Cookies","MySecurity","getUserToken","accessToken","get","encryptedData","jsonData","encryptedPackage","action","data","selectedImage","jsondata","userID","entry","formData","FormData","append","JSON","stringify","undefined","decryptedData"],"sources":["C:/Users/islay/Documents/Local_Repo/CSC4350_SWE/CSC-SWE-Team11CourseView/client/src/api/mySecurity.js"],"sourcesContent":["\nimport Cookies from 'js-cookie';\n// import { JWE, JWK } from 'jose'; //error libarary\n\n{/*\n\nMission encrypted/decrypted data\nPackage Struct:\nreq_encrypted.body = {\n    key: partOfKey,\n    data: encryptedData ={\n        userID: userID,\n        action: action,\n        entry: data\n    },\n    image: image\n}\nBehavior:\nuse tokenS key\n*/}\nexport default class MySecurity {\n    static getUserToken() {\n        {/* connect the databse at server, client use cookie or location storage*/ }\n        const accessToken = Cookies.get('access_token');\n        if (accessToken === null) return \"createNewAccount\";\n        return accessToken?\"\":accessToken;\n    }\n    static encryptedData(jsonData) {\n        /*        \n        // Tempary disable security\n        let secretKey = this.getUserToken();\n        // Create a JSON Web Key (JWK) from the secret key\n        const jwk = JWK.asKey({ k: secretKey, alg: 'dir' });\n\n        // Encrypt the JSON data using JWE\n        JWE.createEncrypt({ format: 'compact', contentAlg: 'A256GCM' }, jwk)\n            .update(JSON.stringify(jsonData), 'utf8')\n            .final()\n            .then((result) => {\n                return result;\n            })\n            .catch((error) => console.error('Encryption Error:', error));\n        return null;\n        */\n        return jsonData;\n    }\n    static encryptedPackage(action, data, selectedImage) {\n        /* \n        // temporary disable security\n        let partOfKey = \"createNewAccount\"\n        let secretKey = this.getUserToken();\n        //console.log(secretKey);\n        \n        if (secretKey !== null && secretKey !== \"createNewAccount\") {\n            partOfKey = secretKey.substring(0, Math.floor(Math.random() * (20 - 10 + 1) + 10));\n        }\n        \n        let jsonData = {\n            userID: Cookies.get(\"userID\"),\n            action: action,\n            entry: data\n        };\n        const encrytedD = this.encryptedData(jsonData);\n       \n        let formData = new FormData();\n        if (selectedImage) {\n            formData.append('image', selectedImage);\n        }\n        formData.append('key', partOfKey);\n        formData.append('data', encrytedD);      \n        */\n        \n        let jsondata = {\n            userID: Cookies.get(\"userID\"),\n            action: action,\n            entry: data\n        };\n        let formData = new FormData();        \n        formData.append('key', \"\");\n        formData.append('data', JSON.stringify(jsondata));\n        if (selectedImage !==null && selectedImage !== undefined) {\n            formData.append('picture', selectedImage);\n        }\n        return formData;\n    }\n    static decryptedData(jsonData) {\n        /*\n        // Tempary disable security\n        let secretKey = this.getUserToken();  \n        // try Decrypt the encrypted data using JWE\n        const jwk = JWK.asKey({ k: secretKey, alg: 'dir' });\n        JWE.createDecrypt(jwk)\n            .decrypt(jsonData, 'utf8')\n            .then((result) => {\n                const decryptedData = JSON.parse(result.payload.toString('utf8'));             \n                return decryptedData;\n            })\n            .catch((error) => console.error('Decryption Error:', error));\n        return null;\n        */\n        return jsonData;\n    }\n}"],"mappings":"AACA,OAAOA,OAAO,MAAM,WAAW;AAC/B;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAdC;AAgBD,eAAe,MAAMC,UAAU,CAAC;EAC5B,OAAOC,YAAYA,CAAA,EAAG;IAClB,CAAC;IACD,MAAMC,WAAW,GAAGH,OAAO,CAACI,GAAG,CAAC,cAAc,CAAC;IAC/C,IAAID,WAAW,KAAK,IAAI,EAAE,OAAO,kBAAkB;IACnD,OAAOA,WAAW,GAAC,EAAE,GAACA,WAAW;EACrC;EACA,OAAOE,aAAaA,CAACC,QAAQ,EAAE;IAC3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEQ,OAAOA,QAAQ;EACnB;EACA,OAAOC,gBAAgBA,CAACC,MAAM,EAAEC,IAAI,EAAEC,aAAa,EAAE;IACjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAGQ,IAAIC,QAAQ,GAAG;MACXC,MAAM,EAAEZ,OAAO,CAACI,GAAG,CAAC,QAAQ,CAAC;MAC7BI,MAAM,EAAEA,MAAM;MACdK,KAAK,EAAEJ;IACX,CAAC;IACD,IAAIK,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC7BD,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC;IAC1BF,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAAC;IACjD,IAAID,aAAa,KAAI,IAAI,IAAIA,aAAa,KAAKS,SAAS,EAAE;MACtDL,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEN,aAAa,CAAC;IAC7C;IACA,OAAOI,QAAQ;EACnB;EACA,OAAOM,aAAaA,CAACd,QAAQ,EAAE;IAC3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,OAAOA,QAAQ;EACnB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}